인터페이스란 ? 
- 일종의 추상클래스
   추상클래스보다 추상화 정도가 높다.
- 실제 구현된 것이 전혀 없는 기본 설계도
- 추상메소드와 상수만을 멤버로 가질 수 있다.
- 인스턴스를 생성할 수 없고, 클래스 작성에 도움을 줄 목적으로 사용된다.
- 미리 정해진 규칙에 맞게 구현하도록 표준을 제시하는 데 사용된다.
- interface를 사용한다는 것 외에는 클래스 작성과 동일
- 구성요소(멤버)는 추상메소드와 상수만 가능

* 인터페이스의 상속
- 인터페이스도 클래스처럼 상속 가능
  (클래스와 달리 다중상속 허용)
- 인터페이스는 Object클래스와 같은 최고 조상이 없다.
- Event 클래스 작성 시 주로 사용

* 인터페이스의 구현
- 인터페이스를 구현하는 것은 클래스를 상속받는 것과 같다.
- extends 대신 implements를 사용.
- 인터페이스에 정의된 추상메소드를 반드시 재정의해야 한다.
- 상속과 구현이 동시에 가능하다.

* 인터페이스를 이용한 다형성
- 인터페이스 타입의 변수로 인터페이스를 구현한 클래스의 인스턴스를 참조할 수 있다.
- 인터페이스를 메소드의 매개변수 타입으로 지정할 수 있다.
- 인터페이스를 메소드의 리턴타입으로 지정할 수 있다.

* 장점
- 개발시간 단축
- 표준화 가능
- 클래스들에게 관계를 맺어 줄 수 있음
- 독릭적인 프로그래밍 가능


클래스에서 인터페이스 상속할 땐 implements 
인터페이스에서 인터페이스 상속할 땐 extendsw