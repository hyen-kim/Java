
=============================================================================

9주차
1교시 : 메소드 오버로딩, 생성자
2교시 : USB메모리 생성자 사용연습
3교시 : 접근지정자
=============================================================================

< 메소드 오버로딩 > : 동일한 이름의 메소드

1. 메소드 오버로딩 (Overloading)
- 하나의 클래스 안에 같은 이름의 메소드 중복 정의
- 다형성 : 동일한 이름으로 다양한 형태를 가짐

* 다음의 2 조건을 모두 만족하여야 한다.
	- 메소드의 이름이 동일함
	- 인수의 개수가 다르거나 인수의 타입이 달라야함

만약에 main에서 int형으로 값을 주는데 
오버로딩이 double으로 준다면 자동으로 double으로 바뀌어 값이 리턴된다.
즉, 에러가 발생하지 않는다.



< 생성자 > : 객체를 구성할 때 반드시 필요 

- 클래스의 구성요소 : 필드, 생성자, 메소드
class 클래스명 {
	// 필드
	// 클래스 속성을 결정하는 데이터
	int k;
	int x;
	// 일반 데이터의 정의
	char ch;	
	
	
	// 생성자의 정의 : 클래스의 속성을 결정하는 메소드
	클래스명() {	
	// 생성자는 리턴타입이 있으면 안됨
	// 클래스의 이름과 동일한 이름의 메소드
	}

	
	// 일반 메소드의 정의 : 클래스의 기능을 수행하는 메소드
	void Abc() {
		..
	}
	void Wxy() {
		..
	}

}

- 객체의 생성 : 생성자의 역할 => 클래스 안에 필드 값을 초기화 시키는 역할 
ex) 클래스 : USB 메모리
// 필드
용량 
버전
색상
// 메소드
생성자 (){
   용량설정
   버전설정
   색상설정
}
메모리 쓰기()
메모리 읽기()
    ....


1. 생성자의 특징 
- 클래스를 객체로 생성할 때 객체의 속성 값들을 초기화
- 클래스의 이름과 동일한 이름을 갖는다.
- 객체를 생성할 때 자동으로 실행된다.
- 속성 값들을 초기화 한다. (객체안의 필드값을 초기화한다.)
- 반환 값이 없으며 void 유형도 지정하지 않는다.
-> 인수가 있는 경우, 인수가 없는 경우에 따라서 다름





< 접근 지정자 >
- 한 객체에서 다른 객체로 접근하는 것을 허용하는 방식	-> 접근을 못하게 하는 것도 포함
- 클래스에 대한 접근 지정자
- 멤버(필드, 메소드)에 대한 접근 지정자

* 4가지 접근 지정자 제공
- private	: 클래스내에서만 사용가능
- protected	: 상속관계일 때 의미 있는 접근 지정자 
- public	: 누구나 접근 가능
- 접근 지정자 생략(default): 같은 패키지안의 객체끼리 접근 가능



1. 클래스에 대한 접근 지정자
- 다른 클래스에서 해당 클래스로의 접근 방식 지정
- 클래스의 선언 부분에 표시

* 2가지 접근 지정자 제공
- public 
: 어느 클래스에서도 해당 클래스를 객체로 사용 가능

- 접근 지정자 생략(default) 
: 같은 패키지의 클래스에서만 해당 클래스 사용 가능
: 다른 패키지의 클래스에서는 사용 불가능



2. 멤버에 대한 접근 지정자
- 다른 클래스에서 해당 클래스의 멤버로의 접근 방식 지정
- 멤버(필드, 메소드)의 선언 부분에 표시
- 상속관계가 없을 경우에는 default와 protected는 같은 관계를 가짐

* 4가지 접근 지정자 제공
멤버에 접근하는 클래스		멤버의 접근 지정자
				dafault		private		protected	public
같은 패키지의 클래스		   O 		   X		    O              O
다른 패키지의 클래스		   X		   X                X              O

- public 
: 패키지 내, 외부 모든 클래스에서 접근 가능

- private 
: 모든 클래스에서 접근 불가능
 
- protected
: 같은 패키지의 클래스에서는 접근 가능
: 다른 패키지의 클래스에서는 접근 불가능

- default
: 같은 패키지의 클래스에서는 접근 가능
: 다른 패키지의 클래스에서는 접근 불가능


* 접근지정자가 있는 이유 ?
- 캡슐화 때문에




