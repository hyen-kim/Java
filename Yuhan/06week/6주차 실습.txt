
===========================================================================

6주차 실습 : 메소드, 예외처리 < 3장 끝 >

===========================================================================

1. 메소드
- 특정 기능을 수행하는 하나의 프로그램 모듈
- 함수(function)와 같은 역할
- 클래스의 기능을 사용하기 위한 방법


* 메소드의 정의
[메소드의 자료형/void] 메소드형 ([인수,...])
{
	...
	메소드의 기능을 수행하는 실행 문장들
	...
	[return();]	<-- 메소드의 반환형이 있는 경우 return 문을 이용한다. 없는 경우 생략
}



* 메소드의 호출
public static void main(String[] args){
	...
	...
	// 반환자료형이 있는 메소드의 경우 반환값을 변수에 저장할 수 있다.
	[y = ] xxx ([인수, ...]);	<-- 인수가 있는 메소드의 경우
					    반드시 인수를 사용하여 호출한다.
	// 함수를 호출하면 해당 메소드의 기능을 수행한 후 [y = ] 뒤로 복귀된다.
	...
	...
}



* 인수의 사용 방법

 메소드의 정의 				인수값전달
	xxx 			(자료형1 변수명1, 자료형2 변수명2)
{
	메소드의 기능을 수행하는 
	프로그램 코드
}



* 반환값이 있는 메소드
자료형 xxx () 
{
	메소드의 기능을 수행하는
	프로그램 코드
	return 자료;
}





2. 예외처리
* 런 타임 오류 (Run Time Error)
- 프로그램의 실행 중 발생하는 오류
- 프로그램이 비 정상적으로 종료
	-> 정수를 0으로 나눔
	-> 배열의 크기보다 큰 인덱스 번호로 접근
	-> 주로 메모리 관련 오류
- 런 타임 오류 발생 가능성이 있는 부분을 미리 대비
- 프로그램에서 처리 함
- 주로 오류 메시지 출력


*try, catch, finally 문
try {
	예외가 발생할 가능성이 있는 실행문
}
catch (처리할 예외 타입 선언) {
	예외 처리문
	여러개 사용 가능
}
finally {
	예외 발생과는 상관없이 무조건 실행되는 실행문
	생략 가능
}


try -> 예외가 발생하지 않았다면 -> finally
try -> 예외가 발생했다면 -> catch -> finally
* try 처리 2중 예외가 발생했디면 처리 3을 실행하지 않고 catch로 넘어간다.

Exception e : 부모클래스
-> 모든 예외 클래스보다 아래에 위치해야함




