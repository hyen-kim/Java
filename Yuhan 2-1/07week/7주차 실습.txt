
=============================================================================

7주차

제4장. 클래스와 객체
1. 객체지향의 개요
2. 클래스와 객체
3. 생성자
4. 접근 지정자
5. 객체지향 관련 기타 문법

=============================================================================

1. 객체지향의 개요

* 객체지향 언어의 장점
- 프로그램 작성의 편리성	-> 클래스 여러개를 하나의 프로그램으로 구현가능
- 프로그램의 안정성		-> byte 코드로 실행
- 일상 생활 속의 모델링	
- 높은 재사용률			-> 하나의 클래스를 여러곳에 사용가능
- 유지보수의 용이함		-> 나눠져있기 때문에 편리





2. 클래스와 객체

* 개념
- 클래스 : 객체를 만드는 틀 또는 설계도
- 객체   : 틀에서 생성한 물체 -> 기능

[클래스명]			==========> 		객체생성(데스크탑, 노트북) 
  컴퓨터		

  [속성]	-> 전역변수 ( =필드 )
  CPU
  메모리 
  그래픽
  무게
  크기
   .
   .
   .

  [메소드]
  CPU설정
  메모리 설정
  그래픽 설정
  부팅가능
  인터넷기능
  게임기능
    .
    .
    .



* 클래스와 객체의 정의

class 클래스명 {
	// 필드(변수)의 정의
	// 클래스의 정의
	int k;
	int x;
	
	// 메소드(함수)의 정의
	void Abc(){
	}
}	// 클래스에는 위의 예제는 생략되어있지만 생성자와 소멸자가 존재


객체의 생성 및 사용은 main에서 => new연산자로 객체 생성



* 클래스의 정의		: 필드, 생성자, 일반메소드로 구분

class 클래스명 {
	// 필드(변수)의 정의
	int k;
	int x;
	char ch;
	.
	.
	.
	

	// 메소드의 정의
	void 클래스명 (){
	// 생성자의 정의
		.
		.
		.
	}
	
	// 일반 메소드의 정의
	void Abc(){
		.
		.
	}
	void Wxy(){
		.
		.
		.
	}

}



* 객체의 생성 및 사용

main() 혹은 다른 클래스 {
	. 
	.
	// 객체의 생성
	클래스명 객체명 = new 클래스명();
	.
	.

	// 객체의 사용
	객체명.필드명;			// => 참조변수 : 객체를 참조할 수 있는 변수
	객체명.메소드();
	.
	.

}



* 현실세계의 객체를 컴퓨터 세계의 객체로 만드는 과정
: 현실세계의 객체는 속성과 기능으로 구성

				추상화				       		 클래스	
RealWord 	
( TV )	-----> 속성(값)   : 모델명, 색상, 사이즈, 무게, 등등			< 필드 >	
	-----> 기능(동작) : 켜다, 끄다, 채널변경, 볼륨변경 등등 		< 메소드 >

* 속성과 기능으로 분류하여 단순화시킨다 => 추상화
  복잡한 현실세계의 객체를 단순화시키는 작업을 추상화라고 말한다.



* 별도의 클래스로 분리
- 클래스의 정의 부분과 객체로 사용하는 부분
- 별도의 클래스로 분리 가능 : 별도의 파일, 동일 파일

class 클래스1 {
	.
	.
	.
}		====> 클래스의 정의


public class 클래스2 {	==> 클래스2의 파일의 이름은 메인이 포함되어 있는 클래스 이름으로
	public static void main(String args[]){
		클래스1 객체 = new 클래스1();	===> 객체로 사용
	}
}





