
=============================================================================

11주차

=============================================================================

< 클래스 상속의 특징 >

* 다중 상속을 지원하지 않음
- 한 개의 클래스만을 상속 받을 수 있다
- 인터페이스는 다중 상속 가능

* 상속의 횟수에 제한 없음
- 상속 받은 자식 클래스를 다시 상속 할 수 있다







< 메소드 오버라이딩 >

* 메소드 오버라이딩의 개념
- 상속할 때 부모클래스의 메소드와 같은 이름의 메소드 정의
- 자식 클래스의 메소드가 실행
- 메소드의 기능을 수정하는 효과
- 메소드 재정의라고도 함







< 오버로딩과 오버라이딩 >

* 메소드 오버로딩
정의 : 동일한 클래스나 상속관계에서 동일한 이름의 메소드를 중복 작성 함
관계 : 동일한 클래스 내 혹은 상속 관계
목적 : 이름이 같은 여러 개의 메소드를 중복 정의하여 사용의 편리성 향상
조건 : 메소드 이름은 반드시 동일함. 메소드의 인수의 개수나 인수의 유형이 달라야함
바인딩 : 정적 바인딩, 컴파일 시에 중복된 메소드 중 호출되는 메소드 결정

* 메소드 오버라이딩 
정의 : 자식 클래스에서 부모 클래스에 있는 메소드와 동일한 이름의 메소드를 다시 정의함
관계 : 상속관계
목적 : 부모 클래스에 구현된 메소드를 무시하고 자식 클래스에서 새로운 기능의 메소드를 재정의 하여 사용함
조건 : 메소드의 이름, 인수의 유형, 인수의 개수, 인수의 반환 유형 등이 모두 동일해야함
바인딩 : 동적 바인딩, 실행 순간에 오버라이딩된 메소드를 찾아 호출함







< 추상 클래스 > 
- 추상 메소드가 포함되어 있는 클래스
- 추상 클래스를 상속받은 자식 클래스에서 메소드 기능 구현
- 메소드 오버라이딩 이용

* 추상 메소드
- 함수의 이름만 선언되어 있는 메소드
- 실제 기능의 구현은 자식 클레스에서
abstract 반환형 메소드이름 (인수, ...);
File -> new -> abstract 

* 추상 클래스의 특징
- 상속받은 자식 클래스에서 추상 메소드를 그 기능에 맞게 구현하도록 설계 됨
- 추상 클래스 자체를 객체로 생성할 수 없다.
- 추상 메소드를 구현하지 않고 상속하면 자식 클래스도 추상 클래스가 됨









< 인터페이스 >
- 추상 클래스를 보완해서 만든 개념
- 메소드 이름만 정의됨
- 실제 구현은 인터페이스를 상속한 클래스에서 코딩
- 모든 메소드가 추상 메소드이어야
- 필드는 상수만 포함 가능

public interface 인터페이스이름 {
	..
	상수
	..
	추상 메소드
	..
}

* 인터페이스의 특징
- 추상 메소드와 상수만으로 구성
- 모든 메소드는 public 이며 생략 가능
- 상수의 선언 시 static, final 키워드 생략 가능
- 인터페이스 자체로 객체 생성 불가
- 다른 인터페이스에 상속 가능
- 다중 상속 가능

* 인터페이스의 상속
- 다중 상속 가능
file -> new -> interface

* 인터페이스의 구현
- 다중 구현 가능
- implements 키워드 사용
- 모든 메소드를 반드시 구현하여야 함

public class 클래스이름 implements 인터페이스1, 인터페이스2, ... {}




