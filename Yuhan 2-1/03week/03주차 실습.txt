
==============================================================================

3주차 : 관계연산자, 논리연산자

==============================================================================

1. 관계연산자 : 왼쪽을 기준, 조건식에 주로 쓰임

>	a>b	a가b보다 크면 true
>=	a>=b	a가 b보다 크거나 같으면 true
<	a<b	b가 a보다 크면 true
<=	a<=b	b가 a보다 크거나 같으면 true
==	a==b	a와 b가 같으면 true
!=	a!=b	a와 b가 다르면 true


2. 논리연산자 

&&	AND(그리고)	a&&b	a와 b 둘다 true일 경우 true	
||	OR(혹은)	a||b	a나 b가 true일 경우 true
!	NOT(아닌)	!a	a가 true면 flase => 반대의 개념

*) 참고
AND와 OR 왜 두개 연산을 쓰는가 ? 수행속도가 빠르다.
AND는 앞이 false이면 뒤의 결과를 실행하지 않고 무조건 false를 결과로 하고
OR은 앞이 true면 뒤의 연산을 하지 않고 true 결과를 낸다.



2-1. 비트 단위 논리연산자 : 그래픽 프로그램에 주로 이용	=> 거의 볼일 없음

&	비트 AND 	a&b	비트 단위로 둘다 1일 때만 1 나머지는 0
|	비트 OR		a|b	비트 단위로 둘다 0일 때만 0 나머지는 1
^	비트 XOR	a^b	비트 단위로 두개의 비트가 다르면 1 같으면 0
~	1의 보수	~a	1은 0으로 0은 1로


2-2. 비트 단위 시프트연산자 

<< 	왼쪽 시프트	a<<N	a를 오른쪽으로 N비트 시프트
>>	오른쪽 시프트	a>>N	a를 왼쪽으로 N비트 시프트

<< 연산자
비트 값들을 왼쪽으로 이동시킨 후에 오른쪽의 빈 공간에는 모두 0으로 채운다.

>> 연산자 : 부호비트에 따라서 달라짐
비트 값들을 오른쪽으로 이동시킨 후에 왼쪽의 빈 공간에는 
양수는 모두 0으로, 음수는 모두 1로 채운다.

>>> 연산자 : C언어 존재X, JAVA 존재O => 자료형 없는 것 때문에 존재
비트 값들을 오른쪽으로 이동시킨 후에 왼쪽의 빈 공간은 모두 0으로 채운다.



3. 3항 조건 연산자 : 항이 3개 

조건식 ? 실행문1 : 실행문2;

조건식이 true 이면 실행문1 실행
조건식이 false이면 실행문2 실행


4. 문자 출력 메소드	=> 문자가 아니더라도 기본자료형을 출력가능
System.out.println() : 지정된 문자를 출력한 후 커서를 다음 줄로 이동 
System.out.print()   : 지정된 문자를 출력한다. (줄바꿈X)


5. 특수문자
* \n	: 커서가 다음줄로 이동 		<- 
* \t	: 커서가 탭 간격으로 이동	<-   요것들만 사용
\b	: 커서가 뒤로 이동
\r	: 커서가 맨 앞으로 이동


6. 문자열의 연결 : '+' 사용 


7. 키보드로부터 문자열 입력

< 스캐너 클래스의 이용 >
import java.util.Scanner;
.
.
.
Scanner s = new Scanner(System.in);
.
.
s.스캐너메소드();

< 스캐너 클래스의 메소드 >
String next()		: 문자열 형태
byte nextByte()		: byte 형태
short nextShort()	: short 형태
int nextInt()		: int 형태
long nextLong()		: long 형태
float nextFloat()	: float 형태
double nextDouble()	: double 형태
String nextLine		: 한 라인 전체 

